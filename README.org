* Kubernetes CRD                                                     :Concept:
:PROPERTIES:
:type:     crd
:END:

#+BEGIN_HTML
<a href="https://github.com/dennyzhang/challenges-k8s-crd"><img align="right" width="200" height="183" src="https://www.dennyzhang.com/wp-content/uploads/denny/watermark/github.png" /></a>

<div id="the whole thing" style="overflow: hidden;">
<div style="float: left; padding: 5px"> <a href="https://www.linkedin.com/in/dennyzhang001"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/linkedin.png" alt="linkedin" /></a></div>
<div style="float: left; padding: 5px"><a href="https://github.com/dennyzhang"><img src="https://www.dennyzhang.com/wp-content/uploads/sns/github.png" alt="github" /></a></div>
<div style="float: left; padding: 5px"><a href="https://www.dennyzhang.com/slack" target="_blank" rel="nofollow"><img src="https://slack.dennyzhang.com/badge.svg" alt="slack"/></a></div>
</div>

<br/><br/>
<a href="http://makeapullrequest.com" target="_blank" rel="nofollow"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"/></a>
#+END_HTML

Blog URL: https://kubernetes.dennyzhang.com/challenges-k8s-crd, Category: [[https://kubernetes.dennyzhang.com/category/concept][concept]]

File me [[https://github.com/DennyZhang/challenges-k8s-crd/issues][Issues]] or star [[https://github.com/DennyZhang/challenges-k8s-crd][this repo]].

See more Kubernetes sharing from Denny: [[https://github.com/topics/denny-kubernetes][#denny-kubernetes]]

** Questions
*** DONE [#A] Two ways to extend kubernetes API: crd and aggregator
    CLOSED: [2018-10-02 Tue 23:08]
https://kubernetes.io/docs/reference/using-api/api-overview/

https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/aggregated-api-servers.md
- CustomResourceDefinition for basic CRUD needs.
- Aggregator for a full set of Kubernetes API semantics to implement their own apiserver.
*** How to instruct controller to restart a pod/container
*** DONE resource vs sub-resource
    CLOSED: [2018-10-02 Tue 11:40]
https://github.com/kubernetes/kubernetes/blob/1b3a2dd0830ca0e02d5b95d2ecc0161d0c93a0c7/staging/src/k8s.io/apiextensions-apiserver/pkg/registry/customresource/etcd.go#L36-L41
*** [#A] Deal with controller crash issue
** Scenario-101: Create a dummy CRD resource
- Requirements:
#+BEGIN_EXAMPLE
1. Install and start minikube
2. Create a dummy resource
3. Create/read/update/delete this CRD
#+END_EXAMPLE
- Main Tech:
- See more: [[https://github.com/dennyzhang/challenges-k8s-crd/tree/master/Scenario-101][Scenario-101]]

** Scenario-102: Create CRD with Subresources
- Requirements:
#+BEGIN_EXAMPLE
1. Install and start minikube
2. Create a CRD
#+END_EXAMPLE

- Main Tech:
- See more: [[https://github.com/dennyzhang/challenges-k8s-crd/tree/master/Scenario-102][Scenario-102]]

** Scenario-103: Create a CRD with a real controller
- Requirements:
#+BEGIN_EXAMPLE
1. Install and start minikube
2. Create a CRD
#+END_EXAMPLE
- Main Tech:
- See more: [[https://github.com/dennyzhang/challenges-k8s-crd/tree/master/Scenario-103][Scenario-103]]
** org-mode configuration                                          :noexport:
#+STARTUP: overview customtime noalign logdone hidestars
 #+DESCRIPTION: 
#+KEYWORDS: 
#+AUTHOR: Denny Zhang
#+EMAIL:  denny@dennyzhang.com
#+TAGS: noexport(n)
#+PRIORITIES: A D C
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:nil skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: exclude noexport
#+SEQ_TODO: TODO HALF ASSIGN | DONE BYPASS DELEGATE CANCELED DEFERRED
#+LINK_UP:   
#+LINK_HOME: 
* More Resources
License: Code is licensed under [[https://www.dennyzhang.com/wp-content/mit_license.txt][MIT License]].

#+BEGIN_EXAMPLE
https://kubernetes.io/docs/tasks/access-kubernetes-api/custom-resources/custom-resource-definitions/
https://blog.openshift.com/kubernetes-deep-dive-code-generation-customresources/
https://github.com/kubernetes/code-generator
https://github.com/kubernetes/sample-controller

https://github.com/martin-helmich/kubernetes-crd-example
https://kubernetes.io/docs/concepts/services-networking/service/
#+END_EXAMPLE

#+BEGIN_HTML
<a href="https://www.dennyzhang.com"><img align="right" width="201" height="268" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/denny_201706.png"></a>

<a href="https://www.dennyzhang.com"><img align="right" src="https://raw.githubusercontent.com/USDevOps/mywechat-slack-group/master/images/dns_small.png"></a>
#+END_HTML
* #  --8<-------------------------- separator ------------------------>8-- :noexport:
* k8s OpenAPI-Specification                                        :noexport:
https://github.com/OAI/OpenAPI-Specification

https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.0.md#schemaObject
** TODO dynamic validate CRD per different types: https://github.com/pivotal-cf/namespace-drain/commit/3082432ba09093daf18263ee2c6e97814b300c6e#r29613054
* [#A] Kubernetes CRD                                               :noexport:
** TODO [#A] Implement controller
https://github.com/kubernetes/sample-controller
** Implement CRD controller
 https://medium.com/@trstringer/create-kubernetes-controllers-for-core-and-custom-resources-62fc35ad64a3
 https://github.com/kubernetes/sample-controller
 https://engineering.bitnami.com/articles/kubewatch-an-example-of-kubernetes-custom-controller.html
** TODO how to deploy CRD controller in real production
** TODO What if controller has crashed.
** TODO [#A] CRD inheritage
** TODO how to define a common syntax for different type
** TODO How CRD /status subresource is implemented?
** TODO Bussiness values of CRD and operator
```
- k8s protocal (CNI)
  - niche market protocal (Computing Common Resource)
    - vendor protocal (vsphere Not-Common)

k8s : engine + built-in plugins/resources (CNI, CSI, CRI, schedule )
protocal
apply-many

sub-protocal
1. CRD -> class (reality concept)
   apply-many

2. operator -> class/resources
               actions (operate)
   resource/service -> operate
   convention
```
** DONE Use CRD subresource
  CLOSED: [2018-07-09 Mon 10:03]
https://deploy-preview-7439--kubernetes-io-vnext-staging.netlify.com/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/#subresources

https://github.com/kubernetes/kubernetes/issues/38113

Here is where CRD subresources feature starts
https://github.com/kubernetes/kubernetes/issues/38113

https://deploy-preview-7439--kubernetes-io-vnext-staging.netlify.com/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/#subresources
Custom resources support /status and /scale subresources. This feature is alpha in v1.10 and may change in backward incompatible ways.

#+BEGIN_EXAMPLE
Then new namespaced RESTful API endpoints are created at:

/apis/stable.example.com/v1/namespaces/*/crontabs/status
and

/apis/stable.example.com/v1/namespaces/*/crontabs/scale
#+END_EXAMPLE
* CRD controller: handle resource deletion events                  :noexport:
* TODO CRD scope: cluster: how to validate it                      :noexport:
